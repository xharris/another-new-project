--[[ TODO
* manually adding assets
]]

--- INITIALIZE BLANKE ENGINE

-- in main.lua:
require('blanke.Blanke')

function love.load()
	BlankE.init()
end

-- possible init options
Blanke.init(first_state) -- first_state: can be string or object

--- STATE (based on HUMP plugin)

-- init code generated by IDE
myState = Class{classname='myState'}

-- methods
-- Ex: function myState:enter(arg) end
load()				-- run only first time state is loaded
enter(previous)		-- run every time state is loaded. previous = prev state
leave()				-- run every time state is left for another.
update(dt)
draw()

-- loading a state
State.switch(myState)

-- ENTITY: game object that can have hitboxes/collisions and sprite animations
-- collisions use HardonCollider

-- init code generated by IDE
myEntity = Class{__includes=Entity, classname='myEntity'}

-- instance properties
str sprite_index
num	sprite_width, sprite_height
num sprite_angle					-- in degrees
num sprite_xscale, sprite_yscale	-- 1 = normal scaling, -1 = flip
num sprite_xoffset, sprite_yoffset
num sprite_xshear, sprite_yshear
num sprite_color{r, g, b}			-- blend color for sprite. default = 255(white)
num sprite_alpha					-- default = 255
num sprite_speed					-- default = 1
num sprite_frame

num direction						-- in degrees
num friction
num gravity
num gravity_direction				-- in degrees. 0 = right, 270 = down
num hspeed, vspeed
num speed 							-- best used with 'direction'
num xprevious, yprevious			-- location during last update loop
num xstart, ystart					-- location when object is first created. not always 0,0

-- overridable methods
preUpdate(dt)
update(dt)							-- caution: controls all physics/motion/position variables
postUpdate(dt)
preDraw()
draw()								-- caution: controls sprite, animation
postDraw()

-- regular methods
debugSprite()						-- call during drawing (ex. state:draw)
debugCollision()					-- shows hitboxes
setSpriteIndex(str index)			
addAnimation{...}					--[[see 'adding an animation'
	name = str
	frames = {...}
	frame_size = {width, height}
	speed = float					
]]
addShape(...)						--[[see 'adding a hitbox'
	name - str
	shape - str rectangle, circle, polygon, point
	dimensions {...}
		- rectangle {left, top, width, height}
		- circle {center_x, center_y, radius}
	}
]]

-- special collision methods
func onCollision{name}
func collisionStopX()
func collisionStopY()

-- adding an animation